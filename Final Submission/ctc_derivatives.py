# -*- coding: utf-8 -*-
"""Copy of Derivatives_Backtester_V2f.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mKzcPul4S87aD66iWGiyMWmD7mfGLX_4
"""

import pandas as pd
import matplotlib as plt
import matplotlib.pyplot as plt
import random, os
from datetime import datetime, timedelta, date
from math import log, sqrt, pi, exp
from scipy.stats import norm
import numpy as np
import pandas as pd

import ctc_derivatives

"""# Derivatives Case Study"""

# An example strategy
# Competitor's code should output a data frame in the same format


def run_strategy_derivatives(start, end, csvs):
    capital = 1000000
    # Load instrument IDs
    spx_ids = pd.read_csv(csvs[1])
    vix_ids = pd.read_csv(csvs[3])

    # Load CSV file data
    vix_options_data = pd.read_csv(csvs[2])
    vix_options_data["ts_recv"] = pd.to_datetime(vix_options_data["ts_recv"], format='%Y-%m-%d %H:%M:%S.%f')
    spx_options_data = pd.read_csv(csvs[0])
    spx_options_data["ts_recv"] = pd.to_datetime(spx_options_data["ts_recv"], format='%Y-%m-%d %H:%M:%S.%f')
    vix_index_data = pd.read_csv(csvs[4])
    vix_index_data["date"] = pd.to_datetime(vix_index_data["date"])
    spx_index_data = pd.read_csv(csvs[5])
    spx_index_data["date"] = pd.to_datetime(spx_index_data["date"])

    # Filter data for the date range
    vix_options_data2 = vix_options_data[(vix_options_data['ts_recv'] >= start) & (vix_options_data['ts_recv'] <= end)]
    spx_options_data = spx_options_data[(spx_options_data['ts_recv'] >= start) & (spx_options_data['ts_recv'] <= end)]
    vix_index_data2 = vix_index_data[(vix_index_data['date'] >= start) & (vix_index_data['date'] <= end)]
    spx_index_data = spx_index_data[(spx_index_data['date'] >= start) & (spx_index_data['date'] <= end)]

    # Initialize variables
    trades = pd.DataFrame({
              'Datetime': [],
              'Option Symbol': [],
              'Action': [],
              'Order size': []
            })
    def format_sym(s):
      return {'index' : s[0:3],
      'exp' : pd.to_datetime(s[6:12], format='%y%m%d'),
      'typ' : s[12],
      'strike' : int(s[13:])/1000}

    def d1(St,K,T,r,o):
        return(log(St/K)+(r+o**2/2.)*T)/(o*sqrt(T))
    def d2(St,K,T,r,o):
        return d1(St,K,T,r,o)-o*sqrt(T)

    def bs_action(typ,St,K,T,r,o):
      if typ == 'C':
        return St*norm.cdf(d1(St,K,T,r,o))-K*exp(-r*T)*norm.cdf(d2(St,K,T,r,o))

    # Iterate through the data to generate trades
    for date in pd.date_range(start=start, end=end, freq='D'):
        # Filter data for the current date
        curr_vix_opts = vix_options_data[vix_options_data['ts_recv'].dt.date == date.date()]
        curr_spx_opts = spx_options_data[spx_options_data['ts_recv'].dt.date == date.date()]
        curr_vix = vix_index_data[vix_index_data['date'].dt.date == date.date()]
        curr_spx = spx_index_data[spx_index_data['date'].dt.date == date.date()]

        # St= spot price of an asset
        # K = strike price
        # r = risk-free interest rate r = 0
        # t = time to maturity
        # o = volatility of the asset
        St = curr_spx["close"].item()
        r = 0
        o = (curr_vix["close"].item() / 100) / sqrt(12)

        for i, opt in curr_spx_opts.iterrows():
            row = spx_ids.loc[spx_ids['instrument_id'] == opt["instrument_id"]]
            fmat = format_sym(row.iloc[0]["raw_symbol"])
            K = fmat['strike']
            t = (fmat['exp'] - date).days / 365
            C = bs_action(fmat['typ'],St,K,t,r,o)

            if C != None and C < opt["bid_px_00"]:
                dll = (opt["bid_px_00"] / 1000000000) * opt["bid_sz_00"]
                if capital - dll >= 0 and dll != 0:
                    bdf = pd.DataFrame({
                      'Datetime': [opt["ts_recv"]],
                      'Option Symbol': [row.iloc[0]["raw_symbol"]],
                      'Action': ["B"],
                      'Order size': [opt["bid_sz_00"]]
                      })
                    trades = pd.concat([trades, bdf], ignore_index=True)
                    capital -= dll
            elif C != None and C < opt["ask_px_00"]:
                dll = (opt["ask_px_00"] / 1000000000) * opt["ask_sz_00"]
                sdf = pd.DataFrame({
                      'Datetime': [opt["ts_recv"]],
                      'Option Symbol': [row.iloc[0]["raw_symbol"]],
                      'Action': ["S"],
                      'Order size': [opt["ask_sz_00"]]
                      })
                trades = pd.concat([trades, sdf], ignore_index=True)
                capital += dll


    return trades

def private_test_deriv():
    file_list = [] # will be 6 files
    file_list.append("SPX_OPTIONS_CSV")
    file_list.append("SPX_OPTIONS_IDS_CSV")
    file_list.append("VIX_OPTIONS_CSV")
    file_list.append("VIX_OPTIONS_IDS_CSV")
    file_list.append("VIX_DATA_CSV")
    file_list.append("S_P_500_DATA_CSV")
    res_dataframe = ctc_sys_eq.run_strategy_derivatives(file_list)

